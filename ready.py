import time
import getpass
import os
import shutil
import requests
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime, timezone, timedelta
import difflib
import hashlib
import threading
from PIL import Image, ImageDraw, ImageFont, EpsImagePlugin
import io
import subprocess
import tempfile
import win32com.client
import win32gui
import win32con
from PIL import ImageGrab
import win32ui
import win32api
from ctypes import windll
import psutil

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
PATHS_TO_WATCH = [
    r"C:\Program Files (x86)\Graphtec\Cutting Master 4\Jobs and Settings\Jobs"
]
ERROR_LOG = r"C:\Program Files (x86)\Graphtec\Cutting Master 4\Temp\saLog.log"
DESIGNS_DIR = r"C:\Users\Lenovo\Desktop\bronoskins"
DJANGO_API = "https://coreldrawce77000.onrender.com/"
MEDIA_PREVIEWS = r"C:\Users\Lenovo\PyCharmMiscProject\media\previews"

PRINTER = "Graphtec CE7000"
USER = getpass.getuser()

# --- –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Cutting Master 4 ---
ENABLE_CUTTING_MASTER_SCREENSHOT = True  # –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Cutting Master 4
CUTTING_MASTER_WINDOW_TITLES = [  # –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω Cutting Master
    "cutting master",
    "graphtec cutting master",
    "cutting master 4"
]
SCREENSHOT_DELAY = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º (—Å–µ–∫—É–Ω–¥—ã)
CUTTING_MASTER_CROP = {  # –û–±—Ä–µ–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    'top': 20,  # –£–±—Ä–∞—Ç—å –º–µ–Ω—é –∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    'bottom': 20,  # –£–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    'left': 20,  # –£–±—Ä–∞—Ç—å –ª–µ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
    'right': 20  # –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤—ã–µ –ø–∞–Ω–µ–ª–∏
}

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
RETRY_DELAYS = [1, 3, 5]
RECENT_FILE_THRESHOLD = 300
ENABLE_DESIGNS_MONITORING = True

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ---
GHOSTSCRIPT_PATH = r"C:\Program Files\gs\gs10.06.0\bin\gswin64c.exe"
RASTER_EXTENSIONS = [".png", ".jpg", ".jpeg", ".bmp", ".gif", ".tiff"]
VECTOR_EXTENSIONS = [".eps", ".ai", ".pdf"]
NATIVE_EXTENSIONS = [".cdr"]
CONVERTIBLE_EXTENSIONS = RASTER_EXTENSIONS + VECTOR_EXTENSIONS + NATIVE_EXTENSIONS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Pillow –¥–ª—è EPS
if os.path.exists(GHOSTSCRIPT_PATH):
    EpsImagePlugin.gs_windows_binary = GHOSTSCRIPT_PATH
    print(f"üì¶ Ghostscript –Ω–∞–π–¥–µ–Ω: {GHOSTSCRIPT_PATH}")
else:
    print(f"‚ö†Ô∏è Ghostscript –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GHOSTSCRIPT_PATH}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
designs_file_cache = {}
pending_jobs = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CorelDRAW
ENABLE_COREL_AUTOMATION = True
COREL_ZOOM_FIT = True
COREL_RETRY_COUNT = 3
SCREENSHOT_QUALITY = 100


def find_cutting_master_window():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Cutting Master 4
    """
    print(f"[CM_WINDOW] üîç –ò—â—É –æ–∫–Ω–æ Cutting Master 4...")

    def enum_windows_callback(hwnd, windows):
        if win32gui.IsWindowVisible(hwnd):
            window_text = win32gui.GetWindowText(hwnd)
            if window_text and any(title.lower() in window_text.lower() for title in CUTTING_MASTER_WINDOW_TITLES):
                windows.append((hwnd, window_text))
        return True

    windows = []
    win32gui.EnumWindows(enum_windows_callback, windows)

    if windows:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "4" –∏–ª–∏ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞)
        main_windows = [w for w in windows if len(w[1]) > 10]  # –û–∫–Ω–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if main_windows:
            selected = main_windows[0]
            print(f"[CM_WINDOW] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ: '{selected[1]}'")
            return selected
        else:
            selected = windows[0]
            print(f"[CM_WINDOW] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: '{selected[1]}'")
            return selected

    print(f"[CM_WINDOW] ‚ùå –û–∫–Ω–æ Cutting Master 4 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    print(f"[CM_WINDOW] üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print(f"[CM_WINDOW]   ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
    print(f"[CM_WINDOW]   ‚Ä¢ –û–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ")
    print(f"[CM_WINDOW]   ‚Ä¢ –î—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    all_windows = []
    win32gui.EnumWindows(enum_windows_callback, all_windows)
    visible_windows = [(hwnd, text) for hwnd, text in all_windows if text and len(text.strip()) > 0]

    print(f"[CM_WINDOW] ü™ü –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–∏–º—ã—Ö –æ–∫–æ–Ω: {len(visible_windows)}")
    for hwnd, text in visible_windows[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        if 'cutting' in text.lower() or 'master' in text.lower() or 'graphtec' in text.lower():
            print(f"[CM_WINDOW]   üìã –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ï: '{text}'")
        elif len(text) > 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            print(f"[CM_WINDOW]   ü™ü '{text}'")

    return None


def screenshot_cutting_master_window(hwnd, save_path, job_title=""):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    """
    print(f"[CM_SCREENSHOT] üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞...")
    if job_title:
        print(f"[CM_SCREENSHOT] üìã –î–ª—è job: '{job_title}'")

    try:
        img = ImageGrab.grab()

        img.save(save_path, 'PNG', quality=100, optimize=False)

        final_width, final_height = img.size
        print(f"[CM_SCREENSHOT] üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        print(f"[CM_SCREENSHOT] üìê –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_width}x{final_height}")
        return True

    except Exception as e:
        print(f"[CM_SCREENSHOT] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return False

def capture_cutting_master_screenshot(job_title):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Cutting Master 4
    """
    if not ENABLE_CUTTING_MASTER_SCREENSHOT:
        print(f"[CM_CAPTURE] ‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç—ã Cutting Master 4 –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return None

    print(f"\n[CM_CAPTURE] =====================")
    print(f"[CM_CAPTURE] üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è job: '{job_title}'")

    # –ù–∞—Ö–æ–¥–∏–º –æ–∫–Ω–æ Cutting Master
    cm_window = find_cutting_master_window()
    if not cm_window:
        print(f"[CM_CAPTURE] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ Cutting Master 4")
        return None

    hwnd, window_title = cm_window
    print(f"[CM_CAPTURE] ü™ü –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫–Ω–æ: '{window_title}'")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    safe_title = "".join(c for c in job_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
    safe_title = safe_title.replace(" ", "_").replace("/", "_")
    timestamp = int(time.time())
    screenshot_filename = f"cm4_{safe_title}_{timestamp}.png"
    screenshot_path = os.path.join(MEDIA_PREVIEWS, screenshot_filename)

    print(f"[CM_CAPTURE] üíæ –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {screenshot_path}")

    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    if screenshot_cutting_master_window(hwnd, screenshot_path, job_title):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if os.path.exists(screenshot_path) and os.path.getsize(screenshot_path) > 1000:
            print(f"[CM_CAPTURE] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return screenshot_path
        else:
            print(f"[CM_CAPTURE] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            return None
    else:
        print(f"[CM_CAPTURE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return None


def normalize_name(s: str) -> str:
    return s.lower().replace(" ", "").replace("_", "")


def convert_to_preview_format(src_path, title):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –≤ PNG –¥–ª—è –ø—Ä–µ–≤—å—é
    """
    print(f"\n[CONVERT] =====================")
    print(f"[CONVERT] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª: {src_path}")

    if not os.path.exists(src_path):
        print(f"[CONVERT] ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {src_path}")
        return None

    file_ext = os.path.splitext(src_path)[1].lower()
    print(f"[CONVERT] –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_ext}")

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ —Ä–∞—Å—Ç—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if file_ext in RASTER_EXTENSIONS:
        print(f"[CONVERT] ‚úÖ –†–∞—Å—Ç—Ä–æ–≤—ã–π —Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
        return src_path

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
    os.makedirs(MEDIA_PREVIEWS, exist_ok=True)
    safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
    safe_title = safe_title.replace(" ", "_").replace("/", "_")
    hash_suffix = hashlib.md5(src_path.encode()).hexdigest()[:6]
    target_filename = f"{safe_title}_{hash_suffix}_converted.png"
    target_path = os.path.join(MEDIA_PREVIEWS, target_filename)

    print(f"[CONVERT] –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {target_path}")

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è EPS/AI/PDF —á–µ—Ä–µ–∑ Pillow + Ghostscript
        if file_ext in ['.eps', '.ai', '.pdf']:
            print(f"[CONVERT] üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {file_ext.upper()} —á–µ—Ä–µ–∑ Pillow...")

            if not os.path.exists(GHOSTSCRIPT_PATH):
                print(f"[CONVERT] ‚ùå Ghostscript –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file_ext.upper()}")
                return None

            with Image.open(src_path) as im:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                im.load(scale=2)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if im.mode in ('RGBA', 'LA', 'P'):
                    background = Image.new('RGB', im.size, (255, 255, 255))
                    if im.mode == 'P':
                        im = im.convert('RGBA')
                    background.paste(im, mask=im.split()[-1] if im.mode in ('RGBA', 'LA') else None)
                    im = background
                elif im.mode not in ('RGB', 'L'):
                    im = im.convert('RGB')

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é (–º–∞–∫—Å–∏–º—É–º 800x600)
                im.thumbnail((800, 600), Image.Resampling.LANCZOS)

                im.save(target_path, 'PNG', quality=95, optimize=True)
                print(f"[CONVERT] ‚úÖ {file_ext.upper()} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PNG")
                return target_path

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CDR
        elif file_ext == '.cdr':
            print(f"[CONVERT] üé® –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CDR...")
            return create_corel_preview(src_path, title)

        else:
            print(f"[CONVERT] ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext}")
            return None

    except Exception as e:
        print(f"[CONVERT] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return None


def find_corel_process():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å CorelDRAW
    """
    corel_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'exe']):
        try:
            if proc.info['name'] and 'corel' in proc.info['name'].lower():
                corel_processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    return corel_processes


def get_corel_window():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ CorelDRAW
    """

    def enum_windows_callback(hwnd, windows):
        if win32gui.IsWindowVisible(hwnd):
            window_text = win32gui.GetWindowText(hwnd)
            if 'coreldraw' in window_text.lower():
                windows.append((hwnd, window_text))
        return True

    windows = []
    win32gui.EnumWindows(enum_windows_callback, windows)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Å–∏—é)
    main_windows = [w for w in windows if 'coreldraw' in w[1].lower() and ('2' in w[1] or 'x' in w[1])]
    if main_windows:
        return main_windows[0]

    return windows[0] if windows else None


def screenshot_corel_window(hwnd, save_path):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞ CorelDRAW —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    print(f"[COREL_SCREENSHOT] üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞ CorelDRAW...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        rect = win32gui.GetWindowRect(hwnd)
        width = rect[2] - rect[0]
        height = rect[3] - rect[1]

        print(f"[COREL_SCREENSHOT] –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {width}x{height}")

        # –ü—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ SetForegroundWindow)
        try:
            win32gui.SetForegroundWindow(hwnd)
        except:
            print(f"[COREL_SCREENSHOT] ‚ö†Ô∏è SetForegroundWindow –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        try:
            win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
        except:
            print(f"[COREL_SCREENSHOT] ‚ö†Ô∏è ShowWindow –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        time.sleep(0.8)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–∫–Ω–∞
        hwnd_dc = None
        mfc_dc = None
        save_dc = None
        save_bitmap = None

        try:
            hwnd_dc = win32gui.GetWindowDC(hwnd)
            mfc_dc = win32ui.CreateDCFromHandle(hwnd_dc)
            save_dc = mfc_dc.CreateCompatibleDC()

            # –°–æ–∑–¥–∞–µ–º bitmap
            save_bitmap = win32ui.CreateBitmap()
            save_bitmap.CreateCompatibleBitmap(mfc_dc, width, height)
            save_dc.SelectObject(save_bitmap)

            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤
            result = False

            # –ú–µ—Ç–æ–¥ 1: PrintWindow —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            try:
                result = windll.user32.PrintWindow(hwnd, save_dc.GetSafeHdc(), 3)  # PW_RENDERFULLCONTENT
                print(f"[COREL_SCREENSHOT] PrintWindow (–º–µ—Ç–æ–¥ 1): {'—É—Å–ø–µ—Ö' if result else '–Ω–µ—É–¥–∞—á–∞'}")
            except Exception as e:
                print(f"[COREL_SCREENSHOT] PrintWindow (–º–µ—Ç–æ–¥ 1) –æ—à–∏–±–∫–∞: {e}")

            # –ú–µ—Ç–æ–¥ 2: PrintWindow –±–µ–∑ —Ñ–ª–∞–≥–æ–≤
            if not result:
                try:
                    result = windll.user32.PrintWindow(hwnd, save_dc.GetSafeHdc(), 0)
                    print(f"[COREL_SCREENSHOT] PrintWindow (–º–µ—Ç–æ–¥ 2): {'—É—Å–ø–µ—Ö' if result else '–Ω–µ—É–¥–∞—á–∞'}")
                except Exception as e:
                    print(f"[COREL_SCREENSHOT] PrintWindow (–º–µ—Ç–æ–¥ 2) –æ—à–∏–±–∫–∞: {e}")

            # –ú–µ—Ç–æ–¥ 3: BitBlt (fallback)
            if not result:
                try:
                    result = save_dc.BitBlt((0, 0), (width, height), mfc_dc, (0, 0), win32con.SRCCOPY)
                    print(f"[COREL_SCREENSHOT] BitBlt (–º–µ—Ç–æ–¥ 3): {'—É—Å–ø–µ—Ö' if result else '–Ω–µ—É–¥–∞—á–∞'}")
                except Exception as e:
                    print(f"[COREL_SCREENSHOT] BitBlt (–º–µ—Ç–æ–¥ 3) –æ—à–∏–±–∫–∞: {e}")

            if result:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ bitmap
                bmp_info = save_bitmap.GetInfo()
                bmp_str = save_bitmap.GetBitmapBits(True)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                img = Image.frombuffer(
                    'RGB',
                    (bmp_info['bmWidth'], bmp_info['bmHeight']),
                    bmp_str, 'raw', 'BGRX', 0, 1
                )

                # –û–±—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å (—É–±–∏—Ä–∞–µ–º –º–µ–Ω—é –∏ –ø–∞–Ω–µ–ª–∏)
                crop_top = min(100, height // 4)  # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é –∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                crop_bottom = min(50, height // 8)  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
                crop_left = min(50, width // 8)  # –£–±–∏—Ä–∞–µ–º –ª–µ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
                crop_right = min(50, width // 8)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤—ã–µ –ø–∞–Ω–µ–ª–∏

                cropped_img = img.crop((
                    crop_left,
                    crop_top,
                    max(width - crop_right, width * 3 // 4),
                    max(height - crop_bottom, height * 3 // 4)
                ))

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
                cropped_img.thumbnail((800, 600), Image.Resampling.LANCZOS)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                cropped_img.save(save_path, 'PNG', quality=SCREENSHOT_QUALITY, optimize=True)

                print(f"[COREL_SCREENSHOT] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
                return True
            else:
                print(f"[COREL_SCREENSHOT] ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞—Ö–≤–∞—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                return False

        except Exception as e:
            print(f"[COREL_SCREENSHOT] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è bitmap: {e}")
            return False
        finally:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            try:
                if save_bitmap:
                    win32gui.DeleteObject(save_bitmap.GetHandle())
                if save_dc:
                    save_dc.DeleteDC()
                if mfc_dc:
                    mfc_dc.DeleteDC()
                if hwnd_dc:
                    win32gui.ReleaseDC(hwnd, hwnd_dc)
            except:
                pass

    except Exception as e:
        print(f"[COREL_SCREENSHOT] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return False


def corel_automation_screenshot(cdr_path, title):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è CorelDRAW –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ñ–∞–π–ª–∞
    """
    if not ENABLE_COREL_AUTOMATION:
        print(f"[COREL_AUTO] ‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è CorelDRAW –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return None

    print(f"\n[COREL_AUTO] =====================")
    print(f"[COREL_AUTO] üé® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è CorelDRAW –¥–ª—è: {cdr_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(cdr_path):
        print(f"[COREL_AUTO] ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cdr_path}")
        return None

    corel_app = None
    screenshot_path = None

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(" ", "_").replace("/", "_")
        timestamp = int(time.time())
        screenshot_filename = f"corel_{safe_title}_{timestamp}.png"
        screenshot_path = os.path.join(MEDIA_PREVIEWS, screenshot_filename)

        print(f"[COREL_AUTO] –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot_path}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É CorelDRAW
        try:
            print(f"[COREL_AUTO] üîó –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ CorelDRAW...")
            corel_app = win32com.client.GetActiveObject("CorelDRAW.Application")
            print(f"[COREL_AUTO] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É CorelDRAW")
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
            print(f"[COREL_AUTO] üöÄ –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CorelDRAW...")
            corel_app = win32com.client.Dispatch("CorelDRAW.Application")
            corel_app.Visible = True
            time.sleep(3)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            print(f"[COREL_AUTO] ‚úÖ CorelDRAW –∑–∞–ø—É—â–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é CorelDRAW
        try:
            version = corel_app.VersionMajor
            print(f"[COREL_AUTO] üìã –í–µ—Ä—Å–∏—è CorelDRAW: {version}")
        except:
            print(f"[COREL_AUTO] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é CorelDRAW")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        print(f"[COREL_AUTO] üìÇ –û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª: {os.path.basename(cdr_path)}")
        doc = corel_app.OpenDocument(cdr_path)

        if not doc:
            print(f"[COREL_AUTO] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            return None

        print(f"[COREL_AUTO] ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç: {doc.Name}")

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.Activate()

        # –ü–æ–¥–≥–æ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±
        if COREL_ZOOM_FIT:
            try:
                print(f"[COREL_AUTO] üîç –ü–æ–¥–≥–æ–Ω—è—é –º–∞—Å—à—Ç–∞–±...")
                active_view = corel_app.ActiveView
                if active_view:
                    active_view.FitToPage()  # –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    time.sleep(0.5)
                    print(f"[COREL_AUTO] ‚úÖ –ú–∞—Å—à—Ç–∞–± –ø–æ–¥–æ–≥–Ω–∞–Ω")
            except Exception as e:
                print(f"[COREL_AUTO] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–≥–Ω–∞—Ç—å –º–∞—Å—à—Ç–∞–±: {e}")

        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1)

        # –ù–∞—Ö–æ–¥–∏–º –æ–∫–Ω–æ CorelDRAW
        corel_window = get_corel_window()
        if not corel_window:
            print(f"[COREL_AUTO] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ CorelDRAW")
            return None

        hwnd, window_title = corel_window
        print(f"[COREL_AUTO] ü™ü –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: {window_title}")

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        for attempt in range(COREL_RETRY_COUNT):
            print(f"[COREL_AUTO] üì∏ –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {attempt + 1}/{COREL_RETRY_COUNT}")

            if screenshot_corel_window(hwnd, screenshot_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if os.path.exists(screenshot_path) and os.path.getsize(screenshot_path) > 1000:
                    print(f"[COREL_AUTO] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è)
                    try:
                        doc.Close(False)  # False = –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
                        print(f"[COREL_AUTO] üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
                    except:
                        print(f"[COREL_AUTO] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")

                    return screenshot_path
                else:
                    print(f"[COREL_AUTO] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")

            if attempt < COREL_RETRY_COUNT - 1:
                time.sleep(1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

        print(f"[COREL_AUTO] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ {COREL_RETRY_COUNT} –ø–æ–ø—ã—Ç–æ–∫")
        return None

    except Exception as e:
        print(f"[COREL_AUTO] ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CorelDRAW: {e}")
        return None
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if corel_app and screenshot_path and not os.path.exists(screenshot_path):
            try:
                # –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                active_doc = corel_app.ActiveDocument
                if active_doc:
                    active_doc.Close(False)
            except:
                pass


def create_corel_preview(cdr_path, title):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è CDR —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CorelDRAW
    """
    print(f"\n[COREL_PREVIEW] =====================")
    print(f"[COREL_PREVIEW] üé® –°–æ–∑–¥–∞—é –ø—Ä–µ–≤—å—é –¥–ª—è CDR: {cdr_path}")

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è CorelDRAW (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if ENABLE_COREL_AUTOMATION:
        screenshot_path = corel_automation_screenshot(cdr_path, title)
        if screenshot_path and os.path.exists(screenshot_path):
            print(f"[COREL_PREVIEW] ‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ CorelDRAW")
            return screenshot_path

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: ImageMagick (fallback)
    try:
        result = subprocess.run(['magick', '-version'],
                                capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"[COREL_PREVIEW] üîß –ü—Ä–æ–±—É—é ImageMagick –∫–∞–∫ fallback...")

            safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title.replace(" ", "_").replace("/", "_")
            timestamp = int(time.time())
            target_filename = f"magick_{safe_title}_{timestamp}.png"
            target_path = os.path.join(MEDIA_PREVIEWS, target_filename)

            cmd = [
                'magick',
                cdr_path + '[0]',
                '-thumbnail', '800x600>',
                '-background', 'white',
                '-flatten',
                target_path
            ]

            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)

            if result.returncode == 0 and os.path.exists(target_path):
                print(f"[COREL_PREVIEW] ‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ ImageMagick")
                return target_path
            else:
                print(f"[COREL_PREVIEW] ‚ùå ImageMagick –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {result.stderr}")

    except (subprocess.TimeoutExpired, FileNotFoundError):
        print(f"[COREL_PREVIEW] ‚ö†Ô∏è ImageMagick –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π placeholder
    print(f"[COREL_PREVIEW] üìù –°–æ–∑–¥–∞—é placeholder –¥–ª—è CDR...")
    return create_cdr_placeholder(cdr_path, title)


def create_cdr_placeholder(cdr_path, title):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π placeholder –¥–ª—è CDR —Ñ–∞–π–ª–æ–≤
    """
    print(f"\n[CDR_PLACEHOLDER] =====================")
    print(f"[CDR_PLACEHOLDER] –°–æ–∑–¥–∞—é placeholder –¥–ª—è CDR: {cdr_path}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_stat = os.stat(cdr_path)
        file_size = file_stat.st_size
        file_mtime = datetime.fromtimestamp(file_stat.st_mtime)

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300
        width, height = 400, 300
        image = Image.new('RGB', (width, height), '#f8f9fa')
        draw = ImageDraw.Draw(image)

        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç (—Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π)
        for y in range(height):
            r = int(248 - (y / height) * 20)
            g = int(249 - (y / height) * 15)
            b = int(250 - (y / height) * 10)
            color = (r, g, b)
            draw.line([(0, y), (width, y)], fill=color)

        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
        draw.rectangle([0, 0, width - 1, height - 1], outline='#6c757d', width=2)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
        try:
            font_title = ImageFont.truetype("arial.ttf", 18)
            font_info = ImageFont.truetype("arial.ttf", 12)
            font_small = ImageFont.truetype("arial.ttf", 10)
        except:
            font_title = ImageFont.load_default()
            font_info = ImageFont.load_default()
            font_small = ImageFont.load_default()

        # –õ–æ–≥–æ—Ç–∏–ø CDR (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
        draw.text((20, 20), "CDR", fill='#dc3545', font=font_title)
        draw.text((60, 25), "CorelDRAW", fill='#6c757d', font=font_small)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
        title_text = title[:25] + "..." if len(title) > 25 else title
        title_bbox = draw.textbbox((0, 0), title_text, font=font_title)
        title_x = (width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 80), title_text, fill='#212529', font=font_title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        size_mb = file_size / (1024 * 1024)
        info_lines = [
            f"–†–∞–∑–º–µ—Ä: {size_mb:.1f} MB",
            f"–ò–∑–º–µ–Ω–µ–Ω: {file_mtime.strftime('%d.%m.%Y %H:%M')}",
            "–¢—Ä–µ–±—É–µ—Ç CorelDRAW –¥–ª—è",
            "–ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        ]

        y_pos = 130
        for line in info_lines:
            line_bbox = draw.textbbox((0, 0), line, font=font_info)
            line_x = (width - (line_bbox[2] - line_bbox[0])) // 2
            color = '#6c757d' if "–¢—Ä–µ–±—É–µ—Ç" in line or "–ø–æ–ª–Ω–æ–≥–æ" in line else '#495057'
            draw.text((line_x, y_pos), line, fill=color, font=font_info)
            y_pos += 20

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        time_text = datetime.now().strftime("–°–æ–∑–¥–∞–Ω–æ: %d.%m.%Y %H:%M")
        time_bbox = draw.textbbox((0, 0), time_text, font=font_small)
        time_x = (width - (time_bbox[2] - time_bbox[0])) // 2
        draw.text((time_x, 260), time_text, fill='#868e96', font=font_small)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(" ", "_").replace("/", "_")
        timestamp = int(time.time())
        placeholder_filename = f"cdr_{safe_title}_{timestamp}.png"
        placeholder_path = os.path.join(MEDIA_PREVIEWS, placeholder_filename)

        image.save(placeholder_path, 'PNG', quality=95)

        print(f"[CDR_PLACEHOLDER] ‚úÖ CDR placeholder —Å–æ–∑–¥–∞–Ω: {placeholder_path}")
        return placeholder_path

    except Exception as e:
        print(f"[CDR_PLACEHOLDER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CDR placeholder: {e}")
        return None


def create_placeholder_preview(title, reason="–ù–æ–≤—ã–π –º–∞–∫–µ—Ç"):
    """
    –°–æ–∑–¥–∞–µ—Ç placeholder –ø—Ä–µ–≤—å—é –¥–ª—è –º–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    print(f"\n[PLACEHOLDER] =====================")
    print(f"[PLACEHOLDER] –°–æ–∑–¥–∞—é placeholder –¥–ª—è: '{title}'")
    print(f"[PLACEHOLDER] –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300 —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        width, height = 400, 300
        image = Image.new('RGB', (width, height), '#f0f0f0')
        draw = ImageDraw.Draw(image)

        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(height):
            r = int(240 + (y / height) * 15)
            g = int(240 + (y / height) * 15)
            b = int(250 + (y / height) * 5)
            color = (r, g, b)
            draw.line([(0, y), (width, y)], fill=color)

        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
        draw.rectangle([0, 0, width - 1, height - 1], outline='#cccccc', width=2)

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        try:
            font_title = ImageFont.truetype("arial.ttf", 20)
            font_subtitle = ImageFont.truetype("arial.ttf", 14)
            font_small = ImageFont.truetype("arial.ttf", 10)
        except:
            font_title = ImageFont.load_default()
            font_subtitle = ImageFont.load_default()
            font_small = ImageFont.load_default()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = title[:30] + "..." if len(title) > 30 else title
        title_bbox = draw.textbbox((0, 0), title_text, font=font_title)
        title_x = (width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 80), title_text, fill='#333333', font=font_title)

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_bbox = draw.textbbox((0, 0), reason, font=font_subtitle)
        subtitle_x = (width - (subtitle_bbox[2] - subtitle_bbox[0])) // 2
        draw.text((subtitle_x, 120), reason, fill='#666666', font=font_subtitle)

        # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        time_text = datetime.now().strftime("%d.%m.%Y %H:%M")
        time_bbox = draw.textbbox((0, 0), time_text, font=font_small)
        time_x = (width - (time_bbox[2] - time_bbox[0])) // 2
        draw.text((time_x, 250), time_text, fill='#999999', font=font_small)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.makedirs(MEDIA_PREVIEWS, exist_ok=True)
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(" ", "_").replace("/", "_")
        timestamp = int(time.time())
        placeholder_filename = f"placeholder_{safe_title}_{timestamp}.png"
        placeholder_path = os.path.join(MEDIA_PREVIEWS, placeholder_filename)

        image.save(placeholder_path, 'PNG', quality=95)

        print(f"[PLACEHOLDER] ‚úÖ –°–æ–∑–¥–∞–Ω placeholder: {placeholder_path}")
        return placeholder_filename  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è rel_path

    except Exception as e:
        print(f"[PLACEHOLDER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return None


def scan_designs_directory():
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å –º–∞–∫–µ—Ç–∞–º–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–µ—à —Ñ–∞–π–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    """
    global designs_file_cache
    print(f"\n[CACHE_SCAN] =====================")
    print(f"[CACHE_SCAN] –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É –º–∞–∫–µ—Ç–æ–≤: {DESIGNS_DIR}")

    new_cache = {}
    file_count = 0

    try:
        for root, dirs, files in os.walk(DESIGNS_DIR):
            for f in files:
                name, ext = os.path.splitext(f)
                if ext.lower() in CONVERTIBLE_EXTENSIONS:
                    full_path = os.path.join(root, f)
                    try:
                        mtime = os.path.getmtime(full_path)
                        rel_path = os.path.relpath(os.path.dirname(full_path), DESIGNS_DIR).replace("\\", "/")
                        if rel_path == ".":
                            rel_path = ""

                        # –ö–ª—é—á –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        norm_name = normalize_name(name)
                        cache_key = f"{rel_path}|{norm_name}" if rel_path else norm_name

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–∞ (—Ä–∞—Å—Ç—Ä–æ–≤—ã–µ –≤–∞–∂–Ω–µ–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö)
                        priority = 1  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö
                        if ext.lower() in VECTOR_EXTENSIONS:
                            priority = 2  # –°—Ä–µ–¥–Ω–∏–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö
                        elif ext.lower() in NATIVE_EXTENSIONS:
                            priority = 3  # –ù–∏–∑–∫–∏–π –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

                        new_cache[cache_key] = {
                            'full_path': full_path,
                            'name': name,
                            'normalized_name': norm_name,
                            'folder': rel_path,
                            'mtime': mtime,
                            'ext': ext,
                            'priority': priority
                        }
                        file_count += 1
                    except OSError:
                        continue

        designs_file_cache = new_cache
        print(f"[CACHE_SCAN] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–µ—à: {file_count} —Ñ–∞–π–ª–æ–≤")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        raster_count = sum(1 for info in new_cache.values() if info['ext'].lower() in RASTER_EXTENSIONS)
        vector_count = sum(1 for info in new_cache.values() if info['ext'].lower() in VECTOR_EXTENSIONS)
        native_count = sum(1 for info in new_cache.values() if info['ext'].lower() in NATIVE_EXTENSIONS)

        print(f"[CACHE_SCAN] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:")
        print(f"[CACHE_SCAN]   –†–∞—Å—Ç—Ä–æ–≤—ã–µ (PNG/JPG): {raster_count}")
        print(f"[CACHE_SCAN]   –í–µ–∫—Ç–æ—Ä–Ω—ã–µ (EPS/AI/PDF): {vector_count}")
        print(f"[CACHE_SCAN]   –ù–∞—Ç–∏–≤–Ω—ã–µ (CDR): {native_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        recent_threshold = time.time() - RECENT_FILE_THRESHOLD
        recent_files = [
            info for info in new_cache.values()
            if info['mtime'] > recent_threshold
        ]

        if recent_files:
            print(f"[CACHE_SCAN] üïí –ù–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(recent_files)}):")
            for info in sorted(recent_files, key=lambda x: x['mtime'], reverse=True)[:10]:
                mtime_str = datetime.fromtimestamp(info['mtime']).strftime("%H:%M:%S")
                rel_path = os.path.relpath(info['full_path'], DESIGNS_DIR)
                file_type = "üñºÔ∏è" if info['ext'].lower() in RASTER_EXTENSIONS else "üìÑ"
                print(f"[CACHE_SCAN]   {mtime_str} {file_type} {rel_path}")

    except Exception as e:
        print(f"[CACHE_SCAN] ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def find_by_time_proximity(search_filename, search_folder=None, job_creation_time=None):
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é job —Ñ–∞–π–ª–∞
    """
    if not job_creation_time:
        job_creation_time = time.time()

    print(f"\n[TIME_SEARCH] =====================")
    print(f"[TIME_SEARCH] –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è: '{search_filename}' –≤ –ø–∞–ø–∫–µ '{search_folder}'")
    print(f"[TIME_SEARCH] –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è job: {datetime.fromtimestamp(job_creation_time).strftime('%H:%M:%S')}")

    candidates = []
    norm_search = normalize_name(search_filename)

    # –ò—â–µ–º —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≤ —Ä–∞–∑—É–º–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ (–¥–æ 10 –º–∏–Ω—É—Ç –¥–æ –∏ –ø–æ—Å–ª–µ)
    time_window = 600  # 10 –º–∏–Ω—É—Ç

    for cache_key, info in designs_file_cache.items():
        time_diff = abs(info['mtime'] - job_creation_time)

        if time_diff <= time_window:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏
            name_ratio = difflib.SequenceMatcher(None, norm_search, info['normalized_name']).ratio()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            folder_match = True
            if search_folder and info['folder'] != search_folder:
                folder_match = False

            if name_ratio > 0.3 or info['normalized_name'] in norm_search or norm_search in info['normalized_name']:
                score = name_ratio
                if folder_match:
                    score += 0.2
                # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                time_bonus = max(0, (time_window - time_diff) / time_window) * 0.1
                score += time_bonus

                candidates.append({
                    'path': info['full_path'],
                    'name': info['name'],
                    'score': score,
                    'time_diff': time_diff,
                    'folder_match': folder_match
                })

                print(f"[TIME_SEARCH]   üïí –ö–∞–Ω–¥–∏–¥–∞—Ç: {info['name']} (score={score:.3f}, –≤—Ä–µ–º—è¬±{time_diff:.0f}—Å)")

    if candidates:
        candidates.sort(key=lambda x: x['score'], reverse=True)
        best = candidates[0]
        print(f"[TIME_SEARCH] ‚úÖ –õ—É—á—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {best['name']} (score={best['score']:.3f})")
        return best['path']

    print(f"[TIME_SEARCH] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    return None


def extract_path_from_job_path(job_file_path, watch_dirs):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ .job —Ñ–∞–π–ª—É
    """
    print(f"\n[PATH_EXTRACT] =====================")
    print(f"[PATH_EXTRACT] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—É—Ç—å: {job_file_path}")

    # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É Jobs
    base_jobs_dir = None
    for watch_dir in watch_dirs:
        if watch_dir in job_file_path:
            base_jobs_dir = watch_dir
            print(f"[PATH_EXTRACT] –ë–∞–∑–æ–≤–∞—è Jobs –ø–∞–ø–∫–∞: {base_jobs_dir}")
            break

    if not base_jobs_dir:
        print(f"[PATH_EXTRACT] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ Jobs –≤ –ø—É—Ç–∏")
        return None, os.path.basename(job_file_path)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ Jobs –¥–æ —Ñ–∞–π–ª–∞
    try:
        rel_path = os.path.relpath(job_file_path, base_jobs_dir)
        print(f"[PATH_EXTRACT] –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {rel_path}")

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª
        folder_part = os.path.dirname(rel_path)
        file_part = os.path.basename(rel_path)

        print(f"[PATH_EXTRACT] –ü–∞–ø–∫–∞: '{folder_part}'")
        print(f"[PATH_EXTRACT] –§–∞–π–ª: '{file_part}'")

        # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .job –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename_without_ext = os.path.splitext(file_part)[0]
        print(f"[PATH_EXTRACT] –ò–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: '{filename_without_ext}'")

        return folder_part if folder_part != "." else None, filename_without_ext

    except Exception as e:
        print(f"[PATH_EXTRACT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—É—Ç–∏: {e}")
        return None, os.path.splitext(os.path.basename(job_file_path))[0]


def parse_job_title(title):
    """
    –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (fallback)
    """
    print(f"[TITLE_PARSE] –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è: '{title}'")
    if "/" in title:
        parts = title.split("/")
        if len(parts) >= 2:
            folder_path = "/".join(parts[:-1])
            filename = parts[-1]
            print(f"[TITLE_PARSE] –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–æ - –ø–∞–ø–∫–∞: '{folder_path}', —Ñ–∞–π–ª: '{filename}'")
            return folder_path, filename
    print(f"[TITLE_PARSE] –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª: '{title}'")
    return "", title


def find_design_file_advanced(title, job_file_path=None, job_creation_time=None):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    """
    print(f"\n[DESIGN_SEARCH] =====================")
    print(f"[DESIGN_SEARCH] –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è JOB: '{title}'")
    if job_file_path:
        print(f"[DESIGN_SEARCH] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ job: '{job_file_path}'")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ job —Ñ–∞–π–ª—É
    folder_from_path = None
    filename_from_path = None

    if job_file_path:
        folder_from_path, filename_from_path = extract_path_from_job_path(job_file_path, PATHS_TO_WATCH)

    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    folder_from_title, filename_from_title = parse_job_title(title)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_folder = folder_from_path if folder_from_path else folder_from_title
    search_filename = filename_from_path if filename_from_path else filename_from_title

    print(f"[DESIGN_SEARCH] –ò–¢–û–ì–û–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
    print(f"[DESIGN_SEARCH]   –ü–∞–ø–∫–∞: '{search_folder}'")
    print(f"[DESIGN_SEARCH]   –§–∞–π–ª: '{search_filename}'")

    norm_filename = normalize_name(search_filename)
    print(f"[DESIGN_SEARCH]   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: '{norm_filename}'")

    # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ü–æ–∏—Å–∫ –≤ –∫–µ—à–µ (–±—ã—Å—Ç—Ä–æ)
    print(f"\n[DESIGN_SEARCH] üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –≤ –∫–µ—à–µ")

    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∏
    if search_folder:
        exact_key = f"{search_folder}|{norm_filename}"
        if exact_key in designs_file_cache:
            result = designs_file_cache[exact_key]['full_path']
            print(f"[DESIGN_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ (—Ç–æ—á–Ω–æ–µ): {result}")
            return result

    # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
    name_matches = []
    for key, info in designs_file_cache.items():
        if info['normalized_name'] == norm_filename:
            name_matches.append(info)

    if name_matches:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Ä–∞—Å—Ç—Ä–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–≤—ã–µ)
        name_matches.sort(key=lambda x: (x['priority'], -x['mtime']))  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å–≤–µ–∂–∏–π mtime

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ –ª—É—á—à–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if search_folder:
            folder_matches = [
                info for info in name_matches
                if search_folder in info['folder']
            ]
            if folder_matches:
                best_match = folder_matches[0]
                print(
                    f"[DESIGN_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ (–ø–∞–ø–∫–∞+–∏–º—è): {best_match['full_path']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {best_match['priority']})")
                return best_match['full_path']

        best_match = name_matches[0]
        print(
            f"[DESIGN_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ (—Ç–æ–ª—å–∫–æ –∏–º—è): {best_match['full_path']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {best_match['priority']})")
        return best_match['full_path']

    # –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    print(f"\n[DESIGN_SEARCH] üïí –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    time_result = find_by_time_proximity(search_filename, search_folder, job_creation_time)
    if time_result:
        return time_result

    # –°–¢–†–ê–¢–ï–ì–ò–Ø 3: Fuzzy –ø–æ–∏—Å–∫ –≤ –∫–µ—à–µ
    print(f"\n[DESIGN_SEARCH] üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Fuzzy –ø–æ–∏—Å–∫")
    fuzzy_candidates = []

    for cache_key, info in designs_file_cache.items():
        norm_name = info['normalized_name']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏
        folder_bonus = 0
        if search_folder and info['folder'] == search_folder:
            folder_bonus = 0.1

        # –†–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
        if len(norm_filename) >= 2 and len(norm_name) >= 2:
            ratio = difflib.SequenceMatcher(None, norm_filename, norm_name).ratio()

            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if len(norm_filename) <= 4:
                starts_with = norm_name.startswith(norm_filename)
                ends_with = norm_name.endswith(norm_filename)
                contains = norm_filename in norm_name

                if starts_with or ends_with or contains:
                    position_bonus = 0.2 if (starts_with or ends_with) else 0.1
                    final_score = min(0.8 + position_bonus + folder_bonus, 1.0)
                    fuzzy_candidates.append((info['full_path'], norm_name, final_score))
            else:
                # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                if ratio >= 0.7:
                    final_score = ratio + folder_bonus
                    fuzzy_candidates.append((info['full_path'], norm_name, final_score))

    if fuzzy_candidates:
        fuzzy_candidates.sort(key=lambda x: x[2], reverse=True)
        best_match, best_name, best_score = fuzzy_candidates[0]
        print(f"[DESIGN_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω fuzzy: {best_match} (score={best_score:.3f})")
        return best_match

    # –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Åcan (–µ—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª)
    print(f"\n[DESIGN_SEARCH] üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    scan_designs_directory()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∫–µ—à–µ
    if search_folder:
        exact_key = f"{search_folder}|{norm_filename}"
        if exact_key in designs_file_cache:
            result = designs_file_cache[exact_key]['full_path']
            print(f"[DESIGN_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result}")
            return result

    print(f"[DESIGN_SEARCH] ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏")
    return None


def find_design_file_with_retry(title, job_file_path=None, job_creation_time=None):
    """
    –ü–æ–∏—Å–∫ –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    print(f"\n[RETRY_SEARCH] =====================")
    print(f"[RETRY_SEARCH] –ü–æ–∏—Å–∫ —Å retry –¥–ª—è: '{title}'")

    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
    result = find_design_file_advanced(title, job_file_path, job_creation_time)
    if result:
        print(f"[RETRY_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏")
        return result

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    for i, delay in enumerate(RETRY_DELAYS):
        print(f"[RETRY_SEARCH] ‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i + 2} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
        time.sleep(delay)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        scan_designs_directory()

        result = find_design_file_advanced(title, job_file_path, job_creation_time)
        if result:
            print(f"[RETRY_SEARCH] ‚úÖ –ù–∞–π–¥–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ {i + 2}")
            return result

    print(f"[RETRY_SEARCH] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return None


def copy_to_media(src_path, title):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –º–µ–¥–∏–∞-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    """
    if not src_path:
        print(f"[COPY_MEDIA] ‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω")
        return None

    print(f"\n[COPY_MEDIA] =====================")
    print(f"[COPY_MEDIA] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {src_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(src_path):
        print(f"[COPY_MEDIA] ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {src_path}")
        return None

    # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
    converted_path = convert_to_preview_format(src_path, title)

    if converted_path and os.path.exists(converted_path):
        # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        rel_path = os.path.relpath(converted_path, os.path.dirname(MEDIA_PREVIEWS))
        print(f"[COPY_MEDIA] ‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {rel_path}")
        return rel_path

    # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ —Ñ–∞–π–ª —Ä–∞—Å—Ç—Ä–æ–≤—ã–π - –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    file_ext = os.path.splitext(src_path)[1].lower()
    if file_ext in RASTER_EXTENSIONS:
        print(f"[COPY_MEDIA] üìã –ö–æ–ø–∏—Ä—É—é —Ä–∞—Å—Ç—Ä–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å...")

        os.makedirs(MEDIA_PREVIEWS, exist_ok=True)
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(" ", "_").replace("/", "_")
        hash_suffix = hashlib.md5(src_path.encode()).hexdigest()[:6]
        dst_filename = f"{safe_title}_{hash_suffix}{file_ext}"
        dst_path = os.path.join(MEDIA_PREVIEWS, dst_filename)

        print(f"[COPY_MEDIA] –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {dst_path}")

    try:
        shutil.copy2(src_path, dst_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy2 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        rel_path = f"previews/{dst_filename}"
        print(f"[COPY_MEDIA] ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {rel_path}")
        return rel_path
    except Exception as e:
        print(f"[COPY_MEDIA] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None


    print(f"[COPY_MEDIA] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
    return None


def send_event(title, status, job_file_path=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Django API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º Cutting Master 4
    """
    print(f"\n[SEND_EVENT] =====================")
    print(f"[SEND_EVENT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ: '{title}' - {status}")
    if job_file_path:
        print(f"[SEND_EVENT] –ü—É—Ç—å –∫ job —Ñ–∞–π–ª—É: {job_file_path}")

    ts = datetime.now(timezone.utc).isoformat()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è job —Ñ–∞–π–ª–∞
    job_creation_time = time.time()
    if job_file_path and os.path.exists(job_file_path):
        try:
            job_creation_time = os.path.getmtime(job_file_path)
            print(f"[SEND_EVENT] –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è job: {datetime.fromtimestamp(job_creation_time).strftime('%H:%M:%S')}")
        except:
            pass

    # –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç Cutting Master 4 –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è job
    cutting_master_screenshot_path = None
    if ENABLE_CUTTING_MASTER_SCREENSHOT:
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è CREATED –∏ MODIFIED —Å–æ–±—ã—Ç–∏–π
        print(f"[SEND_EVENT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Cutting Master 4...")
        cutting_master_screenshot_path = capture_cutting_master_screenshot(title)

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª–∞
    design_file = find_design_file_with_retry(title, job_file_path, job_creation_time)

    preview_rel = None
    preview_full = None

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–≤—å—é:
    # 1. –°–∫—Ä–∏–Ω—à–æ—Ç Cutting Master 4 (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # 2. –ù–∞–π–¥–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª
    # 3. Placeholder –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞–∫–µ—Ç–æ–≤

    if cutting_master_screenshot_path and os.path.exists(cutting_master_screenshot_path):
        print(f"[SEND_EVENT] üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç Cutting Master 4 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é")
        preview_rel = f"previews/{os.path.basename(cutting_master_screenshot_path)}"
        preview_full = cutting_master_screenshot_path
    elif design_file:
        print(f"[SEND_EVENT] üé® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–µ–≤—å—é")
        preview_rel = copy_to_media(design_file, title)
        if preview_rel:
            preview_full = os.path.join(MEDIA_PREVIEWS, os.path.basename(preview_rel))
    else:
        # –°–æ–∑–¥–∞–µ–º placeholder –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞–∫–µ—Ç–æ–≤
        print(f"[SEND_EVENT] üÜï –°–æ–∑–¥–∞—é placeholder –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–∫–µ—Ç–∞")
        placeholder_filename = create_placeholder_preview(title, "–ù–æ–≤—ã–π –º–∞–∫–µ—Ç - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if placeholder_filename:
            preview_rel = f"previews/{placeholder_filename}"
            preview_full = os.path.join(MEDIA_PREVIEWS, placeholder_filename)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–µ–≤—å—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    preview_source = "unknown"
    if cutting_master_screenshot_path and os.path.exists(cutting_master_screenshot_path):
        preview_source = "cutting_master_screenshot"
    elif design_file:
        preview_source = "design_file"
    else:
        preview_source = "placeholder"

    payload = {
        "title": title,
        "created_at": ts,
        "plotter": PRINTER,
        "status": status,
        "is_new_design": design_file is None,  # –§–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
        "preview_source": preview_source,  # –ù–û–í–û–ï: –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–µ–≤—å—é
        "has_cutting_master_screenshot": cutting_master_screenshot_path is not None,
        # –ù–û–í–û–ï: –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ CM4
    }

    print(f"[SEND_EVENT] Payload: {payload}")
    print(f"[SEND_EVENT] Preview: {preview_rel}")
    print(f"[SEND_EVENT] Preview source: {preview_source}")

    files = None
    if preview_full and os.path.exists(preview_full):
        try:
            files = {"preview": open(preview_full, "rb")}
            print(f"[SEND_EVENT] üìÇ –ì–æ—Ç–æ–≤ upload –ø—Ä–µ–≤—å—é: {preview_full}")
        except Exception as e:
            print(f"[SEND_EVENT] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–≤—å—é: {e}")

    try:
        print(f"[SEND_EVENT] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Django API...")
        r = requests.post(DJANGO_API, data=payload, files=files, timeout=10)
        print(f"[SEND_EVENT] üîó –û—Ç–≤–µ—Ç Django: {r.status_code}")
        print(f"[SEND_EVENT] –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {r.text[:500]}")
        r.raise_for_status()
        print(f"[SEND_EVENT] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"[SEND_EVENT] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    finally:
        if files and "preview" in files:
            files["preview"].close()


def delayed_retry_search(title, job_file_path, status, delay):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è job)
    """

    def retry_worker():
        print(f"\n[DELAYED_RETRY] =====================")
        print(f"[DELAYED_RETRY] –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ {delay}—Å –¥–ª—è: '{title}'")
        time.sleep(delay)

        job_creation_time = time.time()
        if job_file_path and os.path.exists(job_file_path):
            try:
                job_creation_time = os.path.getmtime(job_file_path)
            except:
                pass

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        scan_designs_directory()

        # –ò—â–µ–º —Ñ–∞–π–ª
        design_file = find_design_file_advanced(title, job_file_path, job_creation_time)

        if design_file:
            print(f"[DELAYED_RETRY] ‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ: {design_file}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            send_event(f"{title} [–û–ë–ù–û–í–õ–ï–ù–û]", f"{status}_UPDATED", job_file_path)
        else:
            print(f"[DELAYED_RETRY] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=retry_worker)
    thread.daemon = True
    thread.start()


class DesignsHandler(FileSystemEventHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞–ø–∫–∏ —Å –º–∞–∫–µ—Ç–∞–º–∏
    """

    def on_created(self, event):
        if not event.is_directory:
            name, ext = os.path.splitext(os.path.basename(event.src_path))
            if ext.lower() in CONVERTIBLE_EXTENSIONS:
                print(f"\n[DESIGNS_EVENT] =====================")
                print(f"[DESIGNS_EVENT] üÜï –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª: {event.src_path}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                scan_designs_directory()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                norm_name = normalize_name(name)
                rel_folder = os.path.relpath(os.path.dirname(event.src_path), DESIGNS_DIR).replace("\\", "/")
                if rel_folder == ".":
                    rel_folder = ""

                print(f"[DESIGNS_EVENT] –ò—â—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è: '{norm_name}' –≤ –ø–∞–ø–∫–µ '{rel_folder}'")

    def on_modified(self, event):
        if not event.is_directory:
            name, ext = os.path.splitext(os.path.basename(event.src_path))
            if ext.lower() in CONVERTIBLE_EXTENSIONS:
                print(f"\n[DESIGNS_EVENT] =====================")
                print(f"[DESIGNS_EVENT] ‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω –¥–∏–∑–∞–π–Ω-—Ñ–∞–π–ª: {event.src_path}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                scan_designs_directory()


class JobHandler(FileSystemEventHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è .job —Ñ–∞–π–ª–æ–≤
    """

    def on_created(self, event):
        if not event.is_directory and event.src_path.lower().endswith(".job"):
            print(f"\n[FILE_EVENT] =====================")
            print(f"[FILE_EVENT] üÜï –°–û–ó–î–ê–ù —Ñ–∞–π–ª: {event.src_path}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ –∏ —Ñ–∞–π–ª–µ
            folder_name = os.path.basename(os.path.dirname(event.src_path))
            fname = os.path.basename(event.src_path)
            title = os.path.splitext(fname)[0]

            print(f"[FILE_EVENT] –ü–∞–ø–∫–∞: {folder_name}")
            print(f"[FILE_EVENT] –§–∞–π–ª: {fname}")
            print(f"[FILE_EVENT] Title: {title}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ (—Ç–µ–ø–µ—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Cutting Master 4)
            send_event(title, "CREATED", event.src_path)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ
            delayed_retry_search(title, event.src_path, "CREATED", 30)  # –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥

    def on_modified(self, event):
        if not event.is_directory and event.src_path.lower().endswith(".job"):
            print(f"\n[FILE_EVENT] =====================")
            print(f"[FILE_EVENT] ‚úèÔ∏è  –ò–ó–ú–ï–ù–Å–ù —Ñ–∞–π–ª: {event.src_path}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ –∏ —Ñ–∞–π–ª–µ
            folder_name = os.path.basename(os.path.dirname(event.src_path))
            fname = os.path.basename(event.src_path)
            title = os.path.splitext(fname)[0]

            print(f"[FILE_EVENT] –ü–∞–ø–∫–∞: {folder_name}")
            print(f"[FILE_EVENT] –§–∞–π–ª: {fname}")
            print(f"[FILE_EVENT] Title: {title}")

            send_event(title, "MODIFIED", event.src_path)


if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Job Watcher —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ Cutting Master 4")
    print(f"üìÅ –ü–∞–ø–∫–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {PATHS_TO_WATCH}")
    print(f"üé® –ü–∞–ø–∫–∞ —Å –º–∞–∫–µ—Ç–∞–º–∏: {DESIGNS_DIR}")
    print(f"üñºÔ∏è  –ü–∞–ø–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é: {MEDIA_PREVIEWS}")
    print(f"üåê Django API: {DJANGO_API}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USER}")
    print(f"üñ®Ô∏è  –ü—Ä–∏–Ω—Ç–µ—Ä: {PRINTER}")
    print(f"üîÑ Retry –∑–∞–¥–µ—Ä–∂–∫–∏: {RETRY_DELAYS}")
    print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–∫–µ—Ç–æ–≤: {'–í–∫–ª—é—á–µ–Ω' if ENABLE_DESIGNS_MONITORING else '–í—ã–∫–ª—é—á–µ–Ω'}")
    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã Cutting Master 4: {'–í–∫–ª—é—á–µ–Ω—ã' if ENABLE_CUTTING_MASTER_SCREENSHOT else '–í—ã–∫–ª—é—á–µ–Ω—ã'}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    if ENABLE_CUTTING_MASTER_SCREENSHOT:
        print(f"üì∏ –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–†–ò–ù–®–û–¢–û–í CUTTING MASTER 4:")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω: {CUTTING_MASTER_WINDOW_TITLES}")
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º: {SCREENSHOT_DELAY}—Å")
        print(f"   –û–±—Ä–µ–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {CUTTING_MASTER_CROP}")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é
    os.makedirs(MEDIA_PREVIEWS, exist_ok=True)

    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –º–∞–∫–µ—Ç–æ–≤
    print(f"\nüîç –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–∫–µ—Ç–æ–≤...")
    scan_designs_directory()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Cutting Master 4 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if ENABLE_CUTTING_MASTER_SCREENSHOT:
        print(f"\nüì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Cutting Master 4...")
        cm_window = find_cutting_master_window()
        if cm_window:
            print(f"‚úÖ Cutting Master 4 –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
        else:
            print(f"‚ö†Ô∏è  Cutting Master 4 –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

    observers = []

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ job —Ñ–∞–π–ª–∞–º–∏
    for p in PATHS_TO_WATCH:
        if os.path.exists(p):
            obs = Observer()
            obs.schedule(JobHandler(), p, recursive=True)
            obs.start()
            observers.append(obs)
            print(f"üëÄ Watching jobs: {p}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ Jobs:")
            try:
                for root, dirs, files in os.walk(p):
                    level = root.replace(p, '').count(os.sep)
                    indent = ' ' * 2 * level
                    rel_path = os.path.relpath(root, p) if root != p else ""
                    print(f"{indent}üìÅ {rel_path}/")
                    subindent = ' ' * 2 * (level + 1)
                    job_files = [f for f in files if f.lower().endswith('.job')]
                    for f in job_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 job —Ñ–∞–π–ª–æ–≤
                        print(f"{subindent}üìÑ {f}")
                    if len(job_files) > 5:
                        print(f"{subindent}... –∏ –µ—â–µ {len(job_files) - 5} job —Ñ–∞–π–ª–æ–≤")
                    if len(files) - len(job_files) > 0:
                        print(f"{subindent}... –∏ {len(files) - len(job_files)} –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ Jobs: {e}")
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ Jobs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {p}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –ø–∞–ø–∫–æ–π –º–∞–∫–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ENABLE_DESIGNS_MONITORING and os.path.exists(DESIGNS_DIR):
        designs_obs = Observer()
        designs_obs.schedule(DesignsHandler(), DESIGNS_DIR, recursive=True)
        designs_obs.start()
        observers.append(designs_obs)
        print(f"üëÄ Watching designs: {DESIGNS_DIR}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–ø–∫–∏ –º–∞–∫–µ—Ç–æ–≤
        total_designs = len([info for info in designs_file_cache.values()])
        recent_threshold = time.time() - RECENT_FILE_THRESHOLD
        recent_designs = len([
            info for info in designs_file_cache.values()
            if info['mtime'] > recent_threshold
        ])

        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–∫–µ—Ç–æ–≤:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_designs}")
        print(f"   –ù–µ–¥–∞–≤–Ω–∏—Ö (–∑–∞ {RECENT_FILE_THRESHOLD // 60} –º–∏–Ω): {recent_designs}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –º–∞–∫–µ—Ç–∞–º–∏
        folders = set(info['folder'] for info in designs_file_cache.values() if info['folder'])
        print(f"   –ü–∞–ø–æ–∫ —Å –º–∞–∫–µ—Ç–∞–º–∏: {len(folders)}")
        for folder in sorted(list(folders)[:10]):  # –ü–µ—Ä–≤—ã–µ 10 –ø–∞–ø–æ–∫
            folder_files = [info for info in designs_file_cache.values() if info['folder'] == folder]
            print(f"     üìÅ {folder}/ ({len(folder_files)} —Ñ–∞–π–ª–æ–≤)")
        if len(folders) > 10:
            print(f"     ... –∏ –µ—â–µ {len(folders) - 10} –ø–∞–ø–æ–∫")

    print(f"\n‚úÖ Job Watcher –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print(f"üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print(f"   ‚Ä¢ üì∏ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã Cutting Master 4")
    print(f"   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–∞–ø–æ–∫")
    print(f"   ‚Ä¢ Retry —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ {RETRY_DELAYS}")
    print(f"   ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è")
    print(f"   ‚Ä¢ Placeholder –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞–∫–µ—Ç–æ–≤")
    print(f"   ‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ –º–∞–∫–µ—Ç–æ–≤")
    print(f"   ‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ 30—Å")
    print(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞—Å—Ç—Ä–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º")
    print(f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ EPS/AI/PDF ‚Üí PNG")
    print(f"   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ placeholder –¥–ª—è CDR")

    if ENABLE_CUTTING_MASTER_SCREENSHOT:
        print(f"   ‚Ä¢ üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Cutting Master 4 –Ω–∞–¥ –º–∞–∫–µ—Ç–∞–º–∏")
        print(f"   ‚Ä¢ ü™ü –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print(f"   ‚Ä¢ ‚úÇÔ∏è  –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print(f"\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ...")
        for o in observers:
            o.stop()
        for o in observers:
            o.join()
        print(f"‚úÖ Job Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")